# Zigzag Conversion (LeetCode #6) âœ…

[Link to Problem on LeetCode](https://leetcode.com/problems/zigzag-conversion/)

---

## Problem Statement

The string `"PAYPALISHIRING"` is written in a zigzag pattern on a given number of rows like this (fixed font for clarity):

```
P   A   H   N
A P L S I I G
Y   I   R
```

Reading line by line gives `"PAHNAPLSIIGYIR"`.

Write code that will take a string and number of rows, then return the zigzag conversion.

Function signature (Java):

```java
public String convert(String s, int numRows);
```

---

## Examples

**Example 1:**

```
Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
```

**Example 2:**

```
Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I
```

**Example 3:**

```
Input: s = "A", numRows = 1
Output: "A"
```

---

## Constraints

* `1 <= s.length <= 1000`
* `s` consists of English letters (lower-case and upper-case), `','` and `'.'`.
* `1 <= numRows <= 1000`

---

## My Approach & Thought Process ðŸ§ 

1. **Naive Simulation:**

   * Place characters in a 2D matrix row by row and then read line by line.
   * Works, but wastes space when `s` is large.

2. **Optimized Row Tracking âœ… (Better Approach):**

   * Use a list/array of `StringBuilder` (one for each row).
   * Traverse the string character by character:

     * Append each character to the current row.
     * Change direction (down/up) when reaching the first or last row.
   * Finally, join all rows into one result string.

---

## Time & Space Complexity

* **Time Complexity:** O(n), where n = length of string `s`.
* **Space Complexity:** O(n), for storing characters in row lists.

---

## Solution

See [`Solution.java`](Solution.java) for the Java implementation (LeetCode submission version, without main class).
